import 'dart:io';

import 'package:game_boy_graphics_editor/models/graphics/background.dart';
import 'package:game_boy_graphics_editor/models/sourceConverters/source_converter.dart';

import '../graphics/graphics.dart';
import 'converter_utils.dart';

class GBDKBackgroundConverter extends SourceConverter {
  static final GBDKBackgroundConverter _singleton =
  GBDKBackgroundConverter._internal();

  factory GBDKBackgroundConverter() {
    return _singleton;
  }

  GBDKBackgroundConverter._internal();

  // Embedded templates as constants
  static const String _headerTemplate = '''//AUTOGENERATED FILE FROM game_boy_graphics_editor
#ifndef METASPRITE_{{name}}_H
#define METASPRITE_{{name}}_H

#include <stdint.h>
#include <gbdk/platform.h>
#include <gbdk/metasprites.h>

#define {{name}}_TILE_ORIGIN {{tile_origin}};
#define {{name}}_TILE_W 8
#define {{name}}_TILE_H 8
#define {{name}}_WIDTH {{width}};
#define {{name}}_HEIGHT {{height}};
#define {{name}}_TILE_COUNT 0
#define {{name}}_PALETTE_COUNT 1
#define {{name}}_COLORS_PER_PALETTE 4
#define {{name}}_TOTAL_COLORS 4
#define {{name}}_MAP_ATTRIBUTES 0

extern const unsigned char {{name}}_map[{{length}}];
#define {{name}}_map_attributes {{name}}_map

BANKREF_EXTERN({{name}})


#endif''';

  static const String _sourceTemplate = '''#pragma bank {{bank}}

//AUTOGENERATED FILE FROM game_boy_graphics_editor

#include <stdint.h>
#include <gbdk/platform.h>
#include <gbdk/metasprites.h>

BANKREF({{name}})

const unsigned char {{name}}_map[{{length}}] = {
{{data}}
};''';

  String _getTemplate(String templateName) {
    switch (templateName) {
      case 'background.h.tpl':
        return _headerTemplate;
      case 'background.c.tpl':
        return _sourceTemplate;
      default:
        throw Exception('Unknown template: $templateName');
    }
  }

  Background fromGraphics(Graphics graphics) => Background(
    data: graphics.data,
    width: graphics.width ~/ 8,
    height: graphics.height ~/ 8,
  );

  @override
  String toHeader(Graphics graphics, String name) {
    Background background = graphics as Background;

    // Get template
    String template = _getTemplate('background.h.tpl');

    // Replace placeholders
    return template
        .replaceAll('{{name}}', name)
        .replaceAll('{{tile_origin}}', background.tileOrigin.toString())
        .replaceAll('{{width}}', graphics.width.toString())
        .replaceAll('{{height}}', graphics.height.toString())
        .replaceAll('{{length}}', graphics.data.length.toString());
  }

  @override
  String toSource(Graphics graphics, String name) {
    // Get template
    String template = _getTemplate('background.c.tpl');

    // Format the data array
    String formattedData = formatOutput(
      graphics.data.map((e) => decimalToHex(e, prefix: true)).toList(),
    );

    // Replace placeholders
    return template
        .replaceAll('{{bank}}', '255')
        .replaceAll('{{name}}', name)
        .replaceAll('{{length}}', graphics.data.length.toString())
        .replaceAll('{{data}}', formattedData);
  }
}